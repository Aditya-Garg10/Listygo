pipeline {
  agent { label 'docker' }               // runs all stages on a node with Docker CLI installed

  options {
    skipDefaultCheckout()
  }

  stages {
    stage('Clean & Checkout') {
      steps {
        deleteDir()
        // checkout the adi-be branch
        checkout([
          $class: 'GitSCM',
          branches: [[name: 'origin/adi-be']],
          userRemoteConfigs: [[url: 'https://github.com/Aditya-Garg10/Listygo.git']]
        ])
      }
    }

    stage('Inject Firebase Creds') {
      steps {
        // inject your managed firebase-credentials.json
        configFileProvider([configFile(fileId: 'firebase-cred-id', targetLocation: 'firebase-credentials.json')]) {
          echo "✔️ Injected firebase-credentials.json"
        }
      }
    }

    stage('Verify Workspace') {
      steps {
        sh '''
          echo "── Workspace contents ──"
          ls -al .
          echo "──────────────────────"
        '''
      }
    }

    stage('Build & Deploy') {
      steps {
        sh '''
          # 1) Stop & remove any container on port 8000
          docker ps --filter "publish=8000" --format "{{.ID}}" \
            | xargs -r docker stop \
            && docker ps --filter "publish=8000" --format "{{.ID}}" \
            | xargs -r docker rm

          # 2) Remove old instance if still around
          docker rm -f home-backend-1 || true

          # 3) Build the new image (no cache)
          docker build --no-cache -t home-backend .

          # 4) Spin up the container
          docker run -d \
            --name home-backend-1 \
            -p 8000:3000 \
            home-backend
        '''
      }
    }
  }

  post {
    success {
      echo '✅ Deployment complete—your updated code is now live!'
    }
    failure {
      echo '❌ Deployment failed. Check the logs above.'
    }
  }
}
