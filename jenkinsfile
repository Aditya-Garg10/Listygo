pipeline {
  agent any

  environment {
    IMAGE_NAME      = "home-backend"
    CONTAINER_NAME  = "home-backend-1"
    HTTP_PORT       = "8000"
    APP_PORT        = "3000"
  }

  options {
    skipDefaultCheckout()
  }

  stages {
    stage('Clean & Checkout') {
      steps {
        deleteDir()
        checkout([
          $class: 'GitSCM',
          branches: [[name: 'origin/adi-be']],
          userRemoteConfigs: [[url: 'https://github.com/Aditya-Garg10/Listygo.git']]
        ])
      }
    }

    stage('Inject Firebase Creds') {
      steps {
        configFileProvider([configFile(
          fileId: 'firebase-cred-id',                // ← replace with your Config File ID
          targetLocation: 'firebase-credentials.json'
        )]) {
          echo "✔️ Injected firebase-credentials.json"
        }
      }
    }

    stage('Verify Workspace') {
      steps {
        sh '''
          echo "── Workspace contents ──"
          ls -al .
          echo "──────────────────────"
        '''
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          echo "🔨 Building Docker image: ${IMAGE_NAME}:${env.BUILD_NUMBER}"
          // uses Docker Pipeline plugin
          def img = docker.build("${IMAGE_NAME}:${env.BUILD_NUMBER}")
          // optional: tag “latest”
          img.push("latest")
        }
      }
    }

    stage('Deploy Container') {
      steps {
        script {
          // stop & remove any old container
          sh """
            docker stop ${CONTAINER_NAME} || true
            docker rm   ${CONTAINER_NAME} || true
          """
          // run the fresh container
          sh """
            docker run -d \
              --name ${CONTAINER_NAME} \
              -p ${HTTP_PORT}:${APP_PORT} \
              ${IMAGE_NAME}:${env.BUILD_NUMBER}
          """
        }
      }
    }
  }

  post {
    success {
      echo '✅ Deployment succeeded – your app is live!'
    }
    failure {
      echo '❌ Deployment failed. Check the logs above.'
    }
  }
}
